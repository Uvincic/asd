# This is a basic workflow to help you get started with Actions

name: CI - for testing cache

# Controls when the workflow will run
on:
  workflow_call:
    # Map the workflow outputs to job outputs
    outputs:
      buildnumber:
        description: "Build number"
        value: ${{ jobs.build.outputs.output1 }}
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    outputs:
      output1: ${{ steps.build_number.outputs.EXISTS }}
    permissions: write-all
    # The type of runner that the job will run on
    runs-on: windows-2019

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Set build number 
        id: build_number
        run: |
          $exists = "20.03.1998"
          Set-Content -Path ./.github/variables/myvars.env -Value "BUILD_NUMBER=20.03.1998."
          Write-Output "EXISTS=$exists" >> $Env:GITHUB_OUTPUT

      # Runs a single command using the runners shell
      - name: test
        run: Write-Output "${{ steps.build_number.outputs.EXISTS }}" 

      - name: Upload Dockerfile
        uses: actions/upload-artifact@v4
        with:
          name: Docker
          path: ./Dockerfile
      
  docker:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ needs.build.outputs.output1 }}
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
